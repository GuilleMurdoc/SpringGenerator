[comment encoding = UTF-8 /]
[module controllerHelper('http://metamodelSpringGenerator')]

[import GenerationSpringGenerator::files::genericHelper /]

[template public writeControllerPackage(controller : Controller)]
[comment TODO: Change app.basePackage for controllerBasePath /]
package [getPackageName(controller.app.basePackage, '')/];
[/template]

[template public writeControllerImports(controller : Controller)]
import org.springframework.web.bind.annotation.*;
import lombok.RequiredArgsConstructor;
[writeControllerAttributesImports(controller)/]
[writeControllerOwnImports(controller)/]
[/template]

[template private writeControllerAttributesImports(controller : Controller)]
[let dtos : Set(DTO) = 
    controller.endpoints->collect(e | Sequence{e.inputBody, e.outputBody})
    ->flatten()
    ->excluding(null)
    ->asSet()]
[for (dto : DTO | dtos)]
import [getPackageName(dto.app.basePackage, dto._package)/].[dto.name/];
[/for][/let]
[/template]

[template private writeControllerOwnImports(controller : Controller)]
// Write your own imports
[createProtectedZone('Controller Custom Imports')/]
[/template]

[template public writeControllerClassHeader(controller : Controller)]
@RestController
[if (controller.pathparts->notEmpty())]@RequestMapping(value = "[getPathUrl(controller.pathparts)/]")[/if]
@RequiredArgsConstructor
public class [controller.name/] {
[/template]

[template public writeClassAttributes(dto : DTO)]
[for (attribute : Attribute | dto.attributes)]
[if (attribute.attributetype.oclIsKindOf(SimpleAttributeType))]
[if (attribute.attributetype.oclAsType(SimpleAttributeType).nullable)]	@Nullable[/if]
[/if]
	private [getAttributeType(attribute)/] [attribute.name/];

[/for]
[/template]

[template public writeClassConstructor(dto : DTO)]
	public [dto.name/]DTO(
[for (attribute : Attribute | dto.attributes)]
			[getAttributeType(attribute)/] [attribute.name/][if (attribute <> dto.attributes->last())],[/if][if (attribute = dto.attributes->last())]) {[/if]
[/for]
[for (attribute : Attribute | dto.attributes)]
		this.[attribute.name/] = [attribute.name/];
[/for]
	}
[/template]

[query private getAttributeType(attribute : Attribute) : String =
	if attribute.attributetype.oclIsKindOf(ListAttributeType) then
		let listType : ListAttributeType = attribute.attributetype.oclAsType(ListAttributeType) in
			if not listType.type.dto.oclIsUndefined() then
				'List<' + listType.type.dto.name + '>'
			else if not listType.type.primitiveType.oclIsUndefined() then
				'List<' + listType.type.primitiveType + '>'
			else
				'List<Object>'
			endif
			endif
	else if attribute.attributetype.oclIsKindOf(SimpleAttributeType) then
		let simpleType : SimpleAttributeType = attribute.attributetype.oclAsType(SimpleAttributeType) in
			if not simpleType.type.dto.oclIsUndefined() then
				simpleType.type.dto.name
			else if not simpleType.type.primitiveType.oclIsUndefined() then
				simpleType.type.primitiveType
			else
				'Object'
			endif
			endif
	else
		'Object'
	endif
	endif
/]

[query private needsNullableImport(dto : DTO) : Boolean =
	dto.attributes->exists(att |
		att.attributetype.oclIsKindOf(SimpleAttributeType) and
		att.attributetype.oclAsType(SimpleAttributeType).nullable
	)
/]





[query private getPathUrl(pathParts : OrderedSet(PathPart)) : String =
	pathParts->iterate(part; acc : String = '' |
    acc + '/' + (if part.variableType.oclIsUndefined() then part.value else '{' + part.value + '}' endif))
/]
